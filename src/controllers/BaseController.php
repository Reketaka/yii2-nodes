<?php


namespace reketaka\nodes\controllers;

use reketaka\nodes\models\Nodes;
use SebastianBergmann\CodeCoverage\Report\Xml\Node;
use Yii;
use reketaka\nodes\models\NodesSearch;
use yii\data\Pagination;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use reketaka\nodes\helpers\NodeHelper;
use reketaka\nodes\Module;

class BaseController extends Controller{

    public function beforeAction($action)
    {

        $this->view->title = Module::t('titles', Yii::$app->controller->id.'/'.Yii::$app->controller->action->id);
        \reketaka\nodes\assets\NodeAssets::register($this->view);


        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        $searchModel = new NodesSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel'=>$searchModel,
            'dataProvider'=>$dataProvider
        ]);
    }

    public function actionCreate($parent_id){

        $model = new Nodes();

        if($model->load(Yii::$app->request->post()) && $model->save()){
            return $this->redirect(['view', 'id'=>$model->id]);
        }

        $parent = $parent_id != 0?Nodes::findOne($parent_id):false;
        $controllers_methods = NodeHelper::getControllerMethods();

        return $this->render('create', [
            'model'=>$model,
            'parent'=>$parent,
            'controllers_methods'=>$controllers_methods
        ]);

    }

    public function actionUpdate($id){
        $model = $this->findModel($id);

        if($model->load(Yii::$app->request->post()) && $model->save()){
            return $this->redirect(['view', 'id'=>$model->id]);
        }

        $parent = 0;
        if($p = $model->getParent()){
            $parent = $p;
        }

        return $this->render('update', [
            'model'=>$model,
            'parent'=>$parent,
            'controllers_methods'=>NodeHelper::getControllerMethods()
        ]);
    }

    public function actionView($id){

        $model = $this->findModel($id);


        return $this->render('view', [
            'model'=>$model
        ]);
    }

    public function actionDelete($id){
        $model = $this->findModel($id);

        $model->delete();

        return $this->redirect(Yii::$app->request->referrer?Yii::$app->request->referrer:['base/index']);
    }

    public function findModel($id){
        $model = Nodes::findOne($id);

        if(!$model){
            throw new NotFoundHttpException(Module::t('errors', 'not-found'));
        }

        return $model;
    }
}