<?php

namespace reketaka\nodes\models;

use reketaka\nodes\helpers\NodeHelper;
use reketaka\nodes\behaviors\NodesControllerCatalogBehavior;
use Yii;

/**
 * This is the model class for table "nodes_controller_catalog".
 *
 * @property integer $id
 * @property string $path
 * @property integer $default
 *
 * @property Nodes[] $nodes
 */
class NodesControllerCatalog extends \yii\db\ActiveRecord
{

    public function behaviors()
    {
        return [
            [
                'class' => NodesControllerCatalogBehavior::className()
            ]
        ];
    }
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'nodes_controller_catalog';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['path'], 'string', 'max' => 255],
            [['default'], 'default', 'value'=>0],
            [['default'], 'integer']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'path' => Yii::t('app', 'Путь до контроллера и его метода'),
            'default'=>Yii::t('app', 'Контроллер по умолчанию')
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getNodes()
    {
        return $this->hasMany(Nodes::className(), ['controller_id' => 'id']);
    }

    /**
     * Индексирует новые методы контроллеров и записывает их в справочник
     * @return true
     */
    public static function reIndex(){
        foreach(NodeHelper::getControllerMethods() as $path){

            if(NodesControllerCatalog::findOne(['path'=>$path])){
                continue;
            }

            $nodeCC = new self();
            $nodeCC->path = $path;
            $nodeCC->save(true);
        }

        return true;
    }

    /**
     * Возвращает дефолтный контроллер
     * @return null|static
     */
    public static function getDefault(){
        return self::findOne(['default'=>1]);
    }

    public function beforeDelete()
    {
        /**
         * Дочерним Node ставим controller_id = null чобы убрать связь
         */
        Nodes::updateAll(['controller_id'=>self::getDefault()->id], 'controller_id = '.$this->id);

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * Возвращает существующую запись контроллера или добавляет если его не существует
     * @param $path
     * @return null|NodesControllerCatalog|static
     */
    public static function getOrAdd($path){
        if(!$controller = self::findOne(['path'=>$path])){
            $controller = new self();
            $controller->path = $path;
            $controller->save();
            return $controller;
        }

        return $controller;
    }
}
